{"version":3,"sources":["webpack://game-snake/./src/Views/Game/game.html","webpack://game-snake/webpack/bootstrap","webpack://game-snake/./src/Views/View.ts","webpack://game-snake/./src/Utils/ObjectUtils.ts","webpack://game-snake/./src/Enums/Direction.ts","webpack://game-snake/./src/Models/ElementView.ts","webpack://game-snake/./src/Models/Head.ts","webpack://game-snake/./src/Models/BodyPart.ts","webpack://game-snake/./src/Models/Snake.ts","webpack://game-snake/./src/Models/Position.ts","webpack://game-snake/./src/Models/Fruit.ts","webpack://game-snake/./src/Views/Game/game.ts","webpack://game-snake/./src/main.ts"],"names":["module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","View","parent","this","htmlString","innerHTML","Direction","ObjectUtils","obj","cloneObj","__proto__","ElementView","position","size","direction","movingTo","Up","y","Down","Left","x","Right","clone","equals","context","fillRect","Head","OnTouchMargin","maxX","maxY","canvas","width","height","nextDirection","rear","next","touchBody","OnTouchBody","draw","fillStyle","toView","touch","stop","touchHead","index","countChangeDirection","addRear","BodyPart","moveTo","headPosition","Snake","head","Position","Fruit","Math","random","goTo","Game","ChangeDirection","canDrawInLoop","initSnake","Draw","html","require","render","document","getElementById","getContext","Resize","fruit","blockSize","DrawInLoop","Events","snake","GameOver","clearRect","nextMovement","drawHead","setTimeout","getElementsByTagName","setAttribute","window","innerHeight","gameContainer","querySelector","offsetHeight","offsetWidth","addEventListener","e","keydown","touchstart","touchend","touches","clientX","clientY","touchstartPosition","changedTouches","xMovement","yMovement","abs","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","func","key","directionTo","ifNot","move","navigator","serviceWorker","register","then","registration","console","log","registrationError","init"],"mappings":"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","file":"bundle.js","sourcesContent":["// Module\nvar code = \"<header> <div class=\\\"content-center\\\"> <h1>Snake</h1> </div> </header> <section> <div class=\\\"game-container content-center\\\"> <canvas id=\\\"game\\\"></canvas> </div> </section>\";\n// Exports\nmodule.exports = code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export class View {\r\n\r\n    parent: HTMLElement;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    render(htmlString: string) {\r\n        this.parent.innerHTML = htmlString;\r\n    }\r\n}","export class ObjectUtils {\r\n  static clone<T>(obj: T): T {\r\n    const cloneObj = { ...obj } as any;\r\n    cloneObj.__proto__ = (obj as any).__proto__;\r\n    return cloneObj;\r\n  }\r\n}","export enum Direction {\r\n    stop, Up, Down, Left, Right\r\n}","import { Position } from './Position';\r\nimport { Direction } from '../Enums/Direction';\r\nimport { ObjectUtils } from '../Utils/ObjectUtils';\r\n\r\nexport class ElementView {\r\n    position: Position;\r\n    movingTo: Direction;\r\n    size: number;\r\n    constructor(position: Position, size: number) {\r\n        this.position = position;\r\n        this.size = size;\r\n    }\r\n    moveTo(direction: Direction) {\r\n        this.movingTo = direction;\r\n        switch (direction) {\r\n            case Direction.Up:\r\n                this.position.y--\r\n                break;\r\n            case Direction.Down:\r\n                this.position.y++\r\n                break;\r\n            case Direction.Left:\r\n                this.position.x--\r\n                break;\r\n            case Direction.Right:\r\n                this.position.x++\r\n                break;\r\n        }\r\n    }\r\n    goTo(position: Position) {\r\n        this.position = ObjectUtils.clone(position)\r\n    }\r\n    touch(position: Position): boolean {\r\n        return this.position.equals(position);\r\n    }\r\n    protected toView(context: CanvasRenderingContext2D) {\r\n        context.fillRect(this.position.x, this.position.y, this.size, this.size);\r\n    }\r\n}\r\n","import { BodyPart } from './BodyPart';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class Head extends BodyPart {\r\n\r\n    OnTouchMargin: () => void;\r\n    OnTouchBody: () => void;\r\n    Left() {\r\n        if (this.position.x > 0) {\r\n            this.position.x--\r\n        }\r\n        else {\r\n            this.OnTouchMargin();\r\n        };\r\n    }\r\n    Right(maxX: number) {\r\n        if (this.position.x < maxX - this.size) {\r\n            this.position.x++;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n    }\r\n    Up() {\r\n        if (this.position.y > 0) {\r\n            this.position.y--;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n    }\r\n    Down(maxY: number) {\r\n        if (this.position.y < maxY - this.size) {\r\n            this.position.y++;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n    }\r\n\r\n    nextMovement(canvas: HTMLCanvasElement): boolean {\r\n        switch (this.direction) {\r\n            case Direction.Left:\r\n                this.Left();\r\n                break;\r\n            case Direction.Right:\r\n                this.Right(canvas.width);\r\n                break;\r\n            case Direction.Up:\r\n                this.Up();\r\n                break;\r\n            case Direction.Down:\r\n                this.Down(canvas.height);\r\n                break;\r\n        }\r\n        if (this.position.x % this.size === 0 && this.position.y % this.size === 0 && this.nextDirection) {\r\n            if (this.rear) {\r\n                this.rear.nextDirection = this.direction;\r\n            }\r\n            this.direction = this.nextDirection;\r\n        }\r\n        this.rear?.next()\r\n        if (this.touchBody()) {\r\n            this.OnTouchBody?.();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    drawHead(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D, move = true) {\r\n        this.rear?.draw(context);\r\n        context.fillStyle = '#FF0000';\r\n        this.toView(context);\r\n    }\r\n    touchBody(): boolean {\r\n        return (this.touch(this.rear?.position) && this.direction !== Direction.stop) || this.rear?.touchHead(this.position);\r\n    }\r\n}\r\n","import { Position } from './Position';\r\nimport { ObjectUtils } from '../Utils/ObjectUtils';\r\nimport { ElementView } from './ElementView';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class BodyPart extends ElementView {\r\n    rear: BodyPart;\r\n    direction: Direction;\r\n    nextDirection: Direction;\r\n    index: number;\r\n    countChangeDirection: number;\r\n\r\n    constructor(position: Position, size: number, direction: Direction, index: number) {\r\n        super(position, size)\r\n        this.direction = direction;\r\n        this.index = index;\r\n        this.countChangeDirection = this.size;\r\n    }\r\n    addRear() {\r\n        if (this.rear) {\r\n            this.rear.addRear();\r\n        } else {\r\n            this.rear = new BodyPart(ObjectUtils.clone(this.position), this.size, Direction.stop, this.index + 1);\r\n        }\r\n    }\r\n    next() {\r\n        this.moveTo(this.direction)\r\n        this.countChangeDirection--;\r\n        if (this.countChangeDirection === 0) {\r\n            if (this.rear) {\r\n                this.rear.nextDirection = this.direction;\r\n            }\r\n            this.direction = this.nextDirection;\r\n            this.countChangeDirection = this.size;\r\n        }\r\n        this.rear?.next()\r\n    }\r\n    moveTo(direction: Direction) {\r\n        if (this.direction !== Direction.stop) {\r\n            super.moveTo(direction);\r\n        }\r\n    }\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#0F0FFF';\r\n        this.toView(context);\r\n        this.rear?.draw(context);\r\n    }\r\n    touchHead(headPosition: Position): boolean {\r\n        return this.touch(headPosition) || this.rear?.touchHead(headPosition);\r\n    }\r\n\r\n}\r\n","import { Head } from './Head';\r\nimport { Position } from './Position';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class Snake {\r\n    head: Head;\r\n    size: number;\r\n\r\n    constructor(position: Position, size: number) {\r\n        this.size = size;\r\n        this.head = new Head(position, this.size, Direction.stop, 0);\r\n    }\r\n}\r\n\r\n","export class Position {\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    equals(position: Position) {\r\n        return this.x === position?.x && this.y === position?.y\r\n    }\r\n\r\n}\r\n","import { ElementView } from './ElementView';\r\nimport { Position } from './Position';\r\n\r\nexport class Fruit extends ElementView {\r\n\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#FFF000';\r\n        super.toView(context);\r\n    }\r\n    move(maxX: number, maxY: number) {\r\n        let x = Math.random() * maxX;\r\n        x = x - (x % this.size);\r\n        let y = Math.random() * maxY;\r\n        y = y - (y % this.size);\r\n        this.goTo(new Position(x, y));\r\n    }\r\n\r\n}","import { View } from '../View';\r\nimport { Snake } from '../../Models/Snake';\r\nimport { Fruit } from '../../Models/Fruit';\r\nimport { Position } from '../../Models/Position';\r\nimport { Direction } from '../../Enums/Direction';\r\nexport class Game extends View {\r\n\r\n    touchstartPosition = new Position(0, 0)\r\n    blockSize = 50;\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n\r\n    canDrawInLoop = false;\r\n    snake: Snake;\r\n    fruit: Fruit;\r\n\r\n    init() {\r\n        const html = require('./game.html');\r\n        this.render(html);\r\n        this.canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.Resize();\r\n        this.initSnake()\r\n        this.fruit = new Fruit(new Position(200, 200), this.blockSize)\r\n        this.DrawInLoop();\r\n        this.Draw();\r\n        this.Events();\r\n\r\n    }\r\n    initSnake() {\r\n        this.snake = new Snake(new Position(0, 0), this.blockSize);\r\n        this.snake.head.OnTouchMargin = this.GameOver;\r\n    }\r\n    Draw() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.touch();\r\n        if (this.snake.head.nextMovement(this.canvas)) {\r\n            this.snake.head.drawHead(this.canvas, this.context);\r\n        } else {\r\n            this.GameOver()\r\n        }\r\n        this.fruit.draw(this.context);\r\n    }\r\n\r\n    DrawInLoop() {\r\n        if (this.canDrawInLoop) { this.Draw(); }\r\n        setTimeout(() => { this.DrawInLoop() }, 1);\r\n    }\r\n    Resize() {\r\n        document.getElementsByTagName('body')[0].setAttribute('style', `max-height: ${window.innerHeight}px`);\r\n        const gameContainer = document.querySelector('.game-container') as HTMLElement;\r\n        const offsetHeight = gameContainer.offsetHeight\r\n        const offsetWidth = gameContainer.offsetWidth\r\n        this.canvas.height = offsetHeight - (offsetHeight % this.blockSize);\r\n        this.canvas.width = offsetWidth - (offsetWidth % this.blockSize);\r\n    }\r\n\r\n    Events() {\r\n        window.addEventListener('resize', (e) => { this.Resize(); });\r\n        window.addEventListener('keydown', (e) => { this.keydown(e) });\r\n        window.addEventListener('touchstart', (e) => { this.touchstart(e) });\r\n        window.addEventListener('touchend', (e) => { this.touchend(e) });\r\n    }\r\n    touchstart(e: TouchEvent) {\r\n        const x = e.touches[0].clientX;\r\n        const y = e.touches[0].clientY;\r\n        this.touchstartPosition = new Position(x, y);\r\n    }\r\n    touchend(e: TouchEvent) {\r\n        const x = e.changedTouches[0].clientX;\r\n        const y = e.changedTouches[0].clientY;\r\n        const touchstart = this.touchstartPosition;\r\n        const touchend = new Position(x, y);\r\n        const xMovement = touchstart.x - touchend.x;\r\n        const yMovement = touchstart.y - touchend.y;\r\n        const moveInX = Math.abs(xMovement) > Math.abs(yMovement)\r\n        if (moveInX) {\r\n            if (xMovement < -1) {\r\n                this.ArrowRight()\r\n            } else if (xMovement > 1) {\r\n                this.ArrowLeft()\r\n            }\r\n        } else {\r\n            if (yMovement > 1) {\r\n                this.ArrowUp()\r\n            } else if (yMovement < -1) {\r\n                this.ArrowDown()\r\n            }\r\n        }\r\n    }\r\n    keydown(e: KeyboardEvent) {\r\n        const func = (this as any)[e.key]\r\n        if (func) {\r\n            func();\r\n        }\r\n    }\r\n\r\n    ChangeDirection(directionTo: Direction, ifNot: Direction): void {\r\n        const direction = this.snake.head.direction;\r\n        this.canDrawInLoop = true;\r\n        if (direction !== ifNot)\r\n            this.snake.head.nextDirection = directionTo;\r\n    }\r\n    ArrowLeft = () => this.ChangeDirection(Direction.Left, Direction.Right)\r\n    ArrowRight = () => this.ChangeDirection(Direction.Right, Direction.Left)\r\n    ArrowUp = () => this.ChangeDirection(Direction.Up, Direction.Down)\r\n    ArrowDown = () => this.ChangeDirection(Direction.Down, Direction.Up)\r\n\r\n    touch() {\r\n        if (this.snake.head.position.equals(this.fruit.position)) {\r\n            this.fruit.move(this.canvas.width, this.canvas.height);\r\n            this.snake.head.addRear();\r\n        }\r\n    }\r\n\r\n    GameOver = () => {\r\n        this.canDrawInLoop = false;\r\n        this.initSnake()\r\n        this.Draw();\r\n    }\r\n}","import './index.scss';\r\nimport './manifest.json'\r\nimport { Game } from './Views/Game/game';\r\n\r\n\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\r\n        console.log('SW registered: ', registration);\r\n      }).catch(registrationError => {\r\n        console.log('SW registration failed: ', registrationError);\r\n      });\r\n    });\r\n  }\r\n\r\nconst base = document.getElementById('base');\r\nconst game = new Game(base);\r\ngame.init();\r\n"],"sourceRoot":""}