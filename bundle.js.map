{"version":3,"sources":["webpack://game-snake/./src/Views/Game/game.html","webpack://game-snake/webpack/bootstrap","webpack://game-snake/./src/Views/View.ts","webpack://game-snake/./src/Utils/ObjectUtils.ts","webpack://game-snake/./src/utils/ObjectUtils.ts","webpack://game-snake/./src/Models/ElementView.ts","webpack://game-snake/./src/Models/BodyPart.ts","webpack://game-snake/./src/Enums/Direction.ts","webpack://game-snake/./src/Models/Head.ts","webpack://game-snake/./src/Models/Snake.ts","webpack://game-snake/./src/Models/Position.ts","webpack://game-snake/./src/Models/Fruit.ts","webpack://game-snake/./src/main.ts","webpack://game-snake/./src/Views/Game/game.ts"],"names":["module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","View","parent","this","htmlString","innerHTML","ObjectUtils","obj","cloneObj","__proto__","ElementView","position","size","equals","context","fillRect","x","y","Direction","BodyPart","rear","addRear","clone","moveTo","fillStyle","toView","draw","headPosition","touch","touchHead","Head","OnTouchMargin","direcao","Left","maxX","Right","Up","maxY","Down","canvas","Object","assign","nextDirecao","width","height","touchBody","OnTouchBody","Snake","head","Position","Fruit","Math","random","ChangeDirection","canDrawInLoop","initSnake","Draw","html","require","render","document","getElementById","getContext","Resize","fruit","DrawInLoop","Events","snake","GameOver","clearRect","next","drawHead","setTimeout","gameContainer","querySelector","offsetHeight","offsetWidth","blockSize","window","addEventListener","e","keydown","func","key","directionTo","ifNot","move","init"],"mappings":"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","file":"bundle.js","sourcesContent":["// Module\nvar code = \"<header> <div class=\\\"content-center\\\"> <h1>Snake</h1> </div> </header> <section> <div class=\\\"game-container content-center\\\"> <canvas id=\\\"game\\\"></canvas> </div> </section>\";\n// Exports\nmodule.exports = code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export class View {\r\n\r\n    parent: HTMLElement;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    render(htmlString: string) {\r\n        this.parent.innerHTML = htmlString;\r\n    }\r\n}","export class ObjectUtils {\r\n  static clone<T>(obj: T): T {\r\n    const cloneObj = { ...obj } as any;\r\n    cloneObj.__proto__ = (obj as any).__proto__;\r\n    return cloneObj;\r\n  }\r\n}","export class ObjectUtils {\r\n  static clone<T>(obj: T): T {\r\n    const cloneObj = { ...obj } as any;\r\n    cloneObj.__proto__ = (obj as any).__proto__;\r\n    return cloneObj;\r\n  }\r\n}","import { Position } from './Position';\r\nimport { ObjectUtils } from '../utils/ObjectUtils';\r\n\r\nexport class ElementView {\r\n    position: Position;\r\n    size: number;\r\n    constructor(position: Position, size: number) {\r\n        this.position = position;\r\n        this.size = size;\r\n    }\r\n    moveTo(position: Position) {\r\n        this.position = ObjectUtils.clone(position);\r\n    }\r\n    touch(position: Position): boolean {\r\n        return this.position.equals(position);\r\n    }\r\n    protected toView(context: CanvasRenderingContext2D) {\r\n        context.fillRect(this.position.x, this.position.y, this.size, this.size);\r\n    }\r\n}\r\n","import { Position } from './Position';\r\nimport { ObjectUtils } from '../Utils/ObjectUtils';\r\nimport { ElementView } from './ElementView';\r\n\r\nexport class BodyPart extends ElementView {\r\n    rear: BodyPart;\r\n\r\n    addRear() {\r\n        if (this.rear) {\r\n            this.rear.addRear();\r\n        } else {\r\n            this.rear = new BodyPart(ObjectUtils.clone(this.position), this.size);\r\n        }\r\n    }\r\n    moveTo(position: Position) {\r\n        this.rear?.moveTo(this.position);\r\n        super.moveTo(position);\r\n    }\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#0F0FFF';\r\n        this.toView(context);\r\n        this.rear?.draw(context);\r\n    }\r\n    touchHead(headPosition:Position): boolean {\r\n        return this.touch(headPosition) || this.rear?.touchHead(headPosition);\r\n    }\r\n\r\n}\r\n","export enum Direction {\r\n    Up, Down, Left, Right\r\n}","import { BodyPart } from './BodyPart';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class Head extends BodyPart {\r\n    direcao: Direction;\r\n    nextDirecao: Direction;\r\n    OnTouchMargin: () => void;\r\n    OnTouchBody: () => void;\r\n    Left() {\r\n        if (this.position.x > 0) {\r\n            this.position.x = this.position.x - this.size\r\n        }\r\n        else {\r\n            this.OnTouchMargin();\r\n        };\r\n        this.direcao = Direction.Left;\r\n    }\r\n    Right(maxX: number) {\r\n        if (this.position.x < maxX - this.size) {\r\n            this.position.x = this.position.x + this.size;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n        this.direcao = Direction.Right;\r\n    }\r\n    Up() {\r\n        if (this.position.y > 0) {\r\n            this.position.y = this.position.y - this.size;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n        this.direcao = Direction.Up;\r\n    }\r\n    Down(maxY: number) {\r\n        if (this.position.y < maxY - this.size) {\r\n            this.position.y = this.position.y + this.size;\r\n        } else {\r\n            this.OnTouchMargin();\r\n        }\r\n        this.direcao = Direction.Down;\r\n    }\r\n\r\n    next(canvas: HTMLCanvasElement): boolean {\r\n        this.rear?.moveTo(Object.assign(this.position));\r\n        const direcion = this.nextDirecao != null ? this.nextDirecao : this.direcao;\r\n        switch (direcion) {\r\n            case Direction.Left:\r\n                this.Left();\r\n                break;\r\n            case Direction.Right:\r\n                this.Right(canvas.width);\r\n                break;\r\n            case Direction.Up:\r\n                this.Up();\r\n                break;\r\n            case Direction.Down:\r\n                this.Down(canvas.height);\r\n                break;\r\n        }\r\n        this.nextDirecao = null;\r\n        if (this.touchBody()) {\r\n            this.OnTouchBody?.();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    drawHead(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D, move = true) {\r\n        this.rear?.draw(context);\r\n        context.fillStyle = '#FF0000';\r\n        this.toView(context);\r\n    }\r\n    touchBody(): boolean {\r\n        return this.touch(this.rear?.position) || this.rear?.touchHead(this.position);\r\n    }\r\n}\r\n","import { Head } from \"./Head\";\r\nimport { Position } from \"./Position\";\r\n\r\nexport class Snake {\r\n    head: Head;\r\n    size = 50;\r\n    \r\n    constructor(position: Position) {\r\n        this.head = new Head(position, this.size);\r\n    }\r\n}\r\n\r\n","export class Position {\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    equals(position: Position) {\r\n        return this.x === position?.x && this.y === position?.y\r\n    }\r\n\r\n}\r\n","import { ElementView } from './ElementView';\r\nimport { Position } from './Position';\r\n\r\nexport class Fruit extends ElementView {\r\n\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#FFF000';\r\n        super.toView(context);\r\n    }\r\n    move(maxX: number, maxY: number) {\r\n        let x = Math.random() * maxX;\r\n        x = x - (x % this.size);\r\n        let y = Math.random() * maxY;\r\n        y = y - (y % this.size);\r\n        this.moveTo(new Position(x, y));\r\n    }\r\n\r\n}","import './index.scss';\r\nimport { Game } from './Views/Game/game';\r\n\r\nconst base = document.getElementById('base');\r\nconst game = new Game(base);\r\ngame.init();\r\n","import { View } from '../View';\r\nimport { Snake } from '../../Models/Snake';\r\nimport { Fruit } from '../../Models/Fruit';\r\nimport { Position } from '../../Models/Position';\r\nimport { Direction } from '../../Enums/Direction';\r\nexport class Game extends View {\r\n\r\n    blockSize = 50;\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n\r\n    canDrawInLoop = false;\r\n    snake: Snake;\r\n    fruit: Fruit;\r\n    step = 50;\r\n\r\n    init() {\r\n        const html = require('./game.html');\r\n        this.render(html);\r\n        this.canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.Resize();\r\n        this.initSnake()\r\n        this.fruit = new Fruit(new Position(200, 200), 50)\r\n        this.DrawInLoop();\r\n        this.Draw();\r\n        this.Events();\r\n\r\n    }\r\n    initSnake() {\r\n        this.snake = new Snake(new Position(0, 0));\r\n        this.snake.head.OnTouchMargin = this.GameOver;\r\n    }\r\n    Draw() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.touch();\r\n        if (this.snake.head.next(this.canvas)) {\r\n            this.snake.head.drawHead(this.canvas, this.context);\r\n        }else{\r\n            this.GameOver()\r\n        }\r\n        this.fruit.draw(this.context);\r\n    }\r\n    DrawInLoop() {\r\n        if (this.canDrawInLoop) { this.Draw(); }\r\n        setTimeout(() => { this.DrawInLoop() }, 100);\r\n    }\r\n    Resize() {\r\n        const gameContainer = document.querySelector('.game-container') as HTMLElement;\r\n        const offsetHeight = gameContainer.offsetHeight\r\n        const offsetWidth = gameContainer.offsetWidth\r\n        this.canvas.height = offsetHeight - (offsetHeight % this.blockSize);\r\n        this.canvas.width = offsetWidth - (offsetWidth % this.blockSize);\r\n    }\r\n\r\n    Events() {\r\n        window.addEventListener('resize', (e) => { this.Resize(); });\r\n        window.addEventListener('keydown', (e) => { this.keydown(e) });\r\n    }\r\n    keydown(e: KeyboardEvent) {\r\n        const func = (this as any)[e.key]\r\n        if (func) {\r\n            func();\r\n            this.canDrawInLoop = true;\r\n        }\r\n    }\r\n\r\n    ChangeDirection(directionTo: Direction, ifNot: Direction): void {\r\n        const direction = this.snake.head.direcao;\r\n        if (direction !== ifNot)\r\n            this.snake.head.nextDirecao = directionTo;\r\n    }\r\n    ArrowLeft = () => this.ChangeDirection(Direction.Left, Direction.Right)\r\n    ArrowRight = () => this.ChangeDirection(Direction.Right, Direction.Left)\r\n    ArrowUp = () => this.ChangeDirection(Direction.Up, Direction.Down)\r\n    ArrowDown = () => this.ChangeDirection(Direction.Down, Direction.Up)\r\n\r\n    touch() {\r\n        if (this.snake.head.position.equals(this.fruit.position)) {\r\n            this.fruit.move(this.canvas.width, this.canvas.height);\r\n            this.snake.head.addRear();\r\n        }\r\n    }\r\n\r\n    GameOver = () => {\r\n        this.canDrawInLoop = false;\r\n        this.initSnake()\r\n        this.Draw();\r\n    }\r\n}"],"sourceRoot":""}