{"version":3,"sources":["webpack://game-snake/./src/Views/Game/game.html","webpack://game-snake/webpack/bootstrap","webpack://game-snake/./src/Views/View.ts","webpack://game-snake/./src/Utils/ObjectUtils.ts","webpack://game-snake/./src/Enums/Direction.ts","webpack://game-snake/./src/Models/ElementView.ts","webpack://game-snake/./src/Models/Head.ts","webpack://game-snake/./src/Models/BodyPart.ts","webpack://game-snake/./src/Models/Snake.ts","webpack://game-snake/./src/Models/Position.ts","webpack://game-snake/./src/Models/Fruit.ts","webpack://game-snake/./src/Views/Game/game.ts","webpack://game-snake/./src/main.ts"],"names":["module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","View","parent","this","htmlString","innerHTML","Direction","ObjectUtils","obj","cloneObj","__proto__","ElementView","position","size","direction","stepSize","movingTo","Up","y","Down","Left","x","Right","clone","equals","context","fillRect","Head","canvas","maxX","width","maxY","height","OnTouchMargin","isInCanvas","nextDirection","rear","next","touchBody","OnTouchBody","draw","fillStyle","toView","touch","stop","touchHead","index","countChangeDirection","addRear","BodyPart","rearNext","diference","moveTo","constructor","name","headPosition","Snake","head","Position","Fruit","Math","random","goTo","Game","ChangeDirection","canDrawInLoop","initSnake","Draw","Score","updateScore","html","require","render","document","getElementById","getContext","scoreElement","Resize","fruit","blockSize","DrawInLoop","Events","snake","GameOver","clearRect","nextMovement","StepSize","drawHead","setTimeout","Delay","getElementsByTagName","setAttribute","window","innerHeight","gameContainer","querySelector","offsetHeight","offsetWidth","addEventListener","e","keydown","touchstart","touchend","touches","clientX","clientY","touchstartPosition","changedTouches","xMovement","yMovement","abs","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","func","key","directionTo","ifNot","move","score","ceil","textContent","navigator","serviceWorker","register","then","registration","console","log","registrationError","init"],"mappings":"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","file":"bundle.js","sourcesContent":["// Module\nvar code = \"<header> <div class=\\\"content-center\\\"> <h1>Snake</h1> </div> </header> <section> <div class=\\\"game-container content-center\\\"> <canvas id=\\\"game\\\"></canvas> <div class=\\\"score\\\"> <p id=\\\"score\\\">0xp</p> </div> </div> </section>\";\n// Exports\nmodule.exports = code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export class View {\r\n\r\n    parent: HTMLElement;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    render(htmlString: string) {\r\n        this.parent.innerHTML = htmlString;\r\n    }\r\n}","export class ObjectUtils {\r\n  static clone<T>(obj: T): T {\r\n    const cloneObj = { ...obj } as any;\r\n    cloneObj.__proto__ = (obj as any).__proto__;\r\n    return cloneObj;\r\n  }\r\n}","export enum Direction {\r\n    stop, Up, Down, Left, Right\r\n}","import { Position } from './Position';\r\nimport { Direction } from '../Enums/Direction';\r\nimport { ObjectUtils } from '../Utils/ObjectUtils';\r\n\r\nexport class ElementView {\r\n    position: Position;\r\n    movingTo: Direction;\r\n    size: number;\r\n    constructor(position: Position, size: number) {\r\n        this.position = position;\r\n        this.size = size;\r\n    }\r\n    moveTo(direction: Direction, stepSize: number) {\r\n        this.movingTo = direction;\r\n        switch (direction) {\r\n            case Direction.Up:\r\n                this.position.y -= stepSize\r\n                break;\r\n            case Direction.Down:\r\n                this.position.y += stepSize\r\n                break;\r\n            case Direction.Left:\r\n                this.position.x -= stepSize\r\n                break;\r\n            case Direction.Right:\r\n                this.position.x += stepSize\r\n                break;\r\n        }\r\n    }\r\n    goTo(position: Position) {\r\n        this.position = ObjectUtils.clone(position)\r\n    }\r\n    touch(position: Position): boolean {\r\n        return this.position.equals(position);\r\n    }\r\n    protected toView(context: CanvasRenderingContext2D) {\r\n        context.fillRect(this.position.x, this.position.y, this.size, this.size);\r\n    }\r\n}\r\n","import { BodyPart } from './BodyPart';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class Head extends BodyPart {\r\n\r\n    OnTouchMargin: () => void;\r\n    OnTouchBody: () => void;\r\n    isInCanvas(canvas: HTMLCanvasElement) {\r\n        const x = this.position.x\r\n        const y = this.position.y\r\n        const maxX = canvas.width - this.size;\r\n        const maxY = canvas.height - this.size;\r\n        if (x < 0 || x > maxX || y < 0 || y > maxY) {\r\n            this.OnTouchMargin();\r\n        }\r\n    }\r\n\r\n    nextMovement(canvas: HTMLCanvasElement, stepSize: number): boolean {\r\n        this.isInCanvas(canvas)\r\n        if (this.position.x % this.size === 0 && this.position.y % this.size === 0 && this.nextDirection) {\r\n            if (this.rear) {\r\n                this.rear.nextDirection = this.direction;\r\n            }\r\n            this.direction = this.nextDirection;\r\n        }\r\n        this.next(stepSize, false)\r\n        this.rear?.next(stepSize, true)\r\n        if (this.touchBody()) {\r\n            this.OnTouchBody?.();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    drawHead(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D, move = true) {\r\n        this.rear?.draw(context);\r\n        context.fillStyle = '#FF0000';\r\n        this.toView(context);\r\n    }\r\n    touchBody(): boolean {\r\n        return (this.touch(this.rear?.position) && this.direction !== Direction.stop) || this.rear?.touchHead(this.position);\r\n    }\r\n}\r\n","import { Position } from './Position';\r\nimport { ObjectUtils } from '../Utils/ObjectUtils';\r\nimport { ElementView } from './ElementView';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class BodyPart extends ElementView {\r\n    rear: BodyPart;\r\n    direction: Direction;\r\n    nextDirection: Direction;\r\n    index: number;\r\n    countChangeDirection: number;\r\n\r\n    constructor(position: Position, size: number, direction: Direction, index: number) {\r\n        super(position, size)\r\n        this.direction = direction;\r\n        this.index = index;\r\n        this.countChangeDirection = this.size;\r\n    }\r\n    addRear() {\r\n        if (this.rear) {\r\n            this.rear.addRear();\r\n        } else {\r\n            this.rear = new BodyPart(ObjectUtils.clone(this.position), this.size, Direction.stop, this.index + 1);\r\n        }\r\n    }\r\n    next(stepSize: number, rearNext: boolean): void {\r\n        const diference = (this.size % stepSize)\r\n        if (diference >= this.countChangeDirection) {\r\n            stepSize = diference\r\n        }\r\n        this.moveTo(this.direction, stepSize)\r\n        if (!(this.constructor.name === 'Head' && this.direction === Direction.stop)) {\r\n            this.countChangeDirection -= stepSize;\r\n        }\r\n        if (this.countChangeDirection === 0) {\r\n            if (this.rear) {\r\n                this.rear.nextDirection = this.direction;\r\n            }\r\n            this.direction = this.nextDirection;\r\n            this.countChangeDirection = this.size;\r\n        }\r\n        if (rearNext) {\r\n            this.rear?.next(stepSize, true)\r\n        }\r\n    }\r\n    moveTo(direction: Direction, stepSize: number) {\r\n        if (this.direction !== Direction.stop) {\r\n            super.moveTo(direction, stepSize);\r\n        }\r\n    }\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#0F0FFF';\r\n        this.toView(context);\r\n        this.rear?.draw(context);\r\n    }\r\n    touchHead(headPosition: Position): boolean {\r\n        return this.touch(headPosition) || this.rear?.touchHead(headPosition);\r\n    }\r\n\r\n}\r\n","import { Head } from './Head';\r\nimport { Position } from './Position';\r\nimport { Direction } from '../Enums/Direction';\r\n\r\nexport class Snake {\r\n    head: Head;\r\n    size: number;\r\n\r\n    constructor(position: Position, size: number) {\r\n        this.size = size;\r\n        this.head = new Head(position, this.size, Direction.stop, 0);\r\n    }\r\n}\r\n\r\n","export class Position {\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    equals(position: Position) {\r\n        return this.x === position?.x && this.y === position?.y\r\n    }\r\n\r\n}\r\n","import { ElementView } from './ElementView';\r\nimport { Position } from './Position';\r\n\r\nexport class Fruit extends ElementView {\r\n\r\n    draw(context: CanvasRenderingContext2D) {\r\n        context.fillStyle = '#FFF000';\r\n        super.toView(context);\r\n    }\r\n    move(maxX: number, maxY: number) {\r\n        let x = Math.random() * maxX;\r\n        x = x - (x % this.size);\r\n        let y = Math.random() * maxY;\r\n        y = y - (y % this.size);\r\n        this.goTo(new Position(x, y));\r\n    }\r\n\r\n}","import { View } from '../View';\r\nimport { Snake } from '../../Models/Snake';\r\nimport { Fruit } from '../../Models/Fruit';\r\nimport { Position } from '../../Models/Position';\r\nimport { Direction } from '../../Enums/Direction';\r\nexport class Game extends View {\r\n\r\n    touchstartPosition = new Position(0, 0)\r\n    blockSize = 50;\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n\r\n    canDrawInLoop = false;\r\n    snake: Snake;\r\n    fruit: Fruit;\r\n\r\n    StepSize = 2;\r\n    Score = 0;\r\n    Delay = 10;\r\n    scoreElement: HTMLParagraphElement;\r\n\r\n    init() {\r\n        const html = require('./game.html');\r\n        this.render(html);\r\n        this.canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.scoreElement = document.getElementById('score') as HTMLParagraphElement;\r\n        this.Resize();\r\n        this.initSnake()\r\n        this.fruit = new Fruit(new Position(200, 200), this.blockSize)\r\n        this.DrawInLoop();\r\n        this.Draw();\r\n        this.Events();\r\n\r\n    }\r\n    initSnake() {\r\n        this.snake = new Snake(new Position(0, 0), this.blockSize);\r\n        this.snake.head.OnTouchMargin = this.GameOver;\r\n    }\r\n    Draw() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.touch();\r\n\r\n        if (this.snake.head.nextMovement(this.canvas, this.StepSize)) {\r\n            this.snake.head.drawHead(this.canvas, this.context);\r\n        } else {\r\n            this.GameOver()\r\n        }\r\n        this.fruit.draw(this.context);\r\n    }\r\n\r\n    DrawInLoop() {\r\n        if (this.canDrawInLoop) { this.Draw(); }\r\n        setTimeout(() => { this.DrawInLoop() }, this.Delay);\r\n    }\r\n    Resize() {\r\n        document.getElementsByTagName('body')[0].setAttribute('style', `max-height: ${window.innerHeight}px`);\r\n        const gameContainer = document.querySelector('.game-container') as HTMLElement;\r\n        const offsetHeight = gameContainer.offsetHeight\r\n        const offsetWidth = gameContainer.offsetWidth\r\n        this.canvas.height = offsetHeight - (offsetHeight % this.blockSize);\r\n        this.canvas.width = offsetWidth - (offsetWidth % this.blockSize);\r\n    }\r\n\r\n    Events() {\r\n        window.addEventListener('resize', (e) => { this.Resize(); });\r\n        window.addEventListener('keydown', (e) => { this.keydown(e) });\r\n        window.addEventListener('touchstart', (e) => { this.touchstart(e) });\r\n        window.addEventListener('touchend', (e) => { this.touchend(e) });\r\n    }\r\n    touchstart(e: TouchEvent) {\r\n        const x = e.touches[0].clientX;\r\n        const y = e.touches[0].clientY;\r\n        this.touchstartPosition = new Position(x, y);\r\n    }\r\n    touchend(e: TouchEvent) {\r\n        const x = e.changedTouches[0].clientX;\r\n        const y = e.changedTouches[0].clientY;\r\n        const touchstart = this.touchstartPosition;\r\n        const touchend = new Position(x, y);\r\n        const xMovement = touchstart.x - touchend.x;\r\n        const yMovement = touchstart.y - touchend.y;\r\n        const moveInX = Math.abs(xMovement) > Math.abs(yMovement)\r\n        if (moveInX) {\r\n            if (xMovement < -1) {\r\n                this.ArrowRight()\r\n            } else if (xMovement > 1) {\r\n                this.ArrowLeft()\r\n            }\r\n        } else {\r\n            if (yMovement > 1) {\r\n                this.ArrowUp()\r\n            } else if (yMovement < -1) {\r\n                this.ArrowDown()\r\n            }\r\n        }\r\n    }\r\n    keydown(e: KeyboardEvent) {\r\n        const func = (this as any)[e.key]\r\n        if (func) {\r\n            func();\r\n        }\r\n    }\r\n\r\n    ChangeDirection(directionTo: Direction, ifNot: Direction): void {\r\n        const direction = this.snake.head.direction;\r\n        this.canDrawInLoop = true;\r\n        if (direction !== ifNot)\r\n            this.snake.head.nextDirection = directionTo;\r\n    }\r\n    ArrowLeft = () => this.ChangeDirection(Direction.Left, Direction.Right)\r\n    ArrowRight = () => this.ChangeDirection(Direction.Right, Direction.Left)\r\n    ArrowUp = () => this.ChangeDirection(Direction.Up, Direction.Down)\r\n    ArrowDown = () => this.ChangeDirection(Direction.Down, Direction.Up)\r\n\r\n    touch() {\r\n        if (this.snake.head.position.equals(this.fruit.position)) {\r\n            this.fruit.move(this.canvas.width, this.canvas.height);\r\n            this.snake.head.addRear();\r\n            this.Score++;\r\n            this.updateScore()\r\n        }\r\n    }\r\n\r\n    updateScore() {\r\n        const score = this.Score / 4;\r\n        this.Delay = Math.ceil(score - (Math.ceil((score + 1) / 10) * 10)) * -1;\r\n        this.StepSize = this.Delay <= 5 ? 1 : 2;\r\n        this.scoreElement.textContent = `${this.Score}XP`;\r\n    }\r\n\r\n    GameOver = () => {\r\n        this.canDrawInLoop = false;\r\n        this.initSnake()\r\n        this.Draw();\r\n        this.Score = 0;\r\n        this.updateScore()\r\n    }\r\n}","import './index.scss';\r\nimport './manifest.json'\r\nimport { Game } from './Views/Game/game';\r\n\r\n\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\r\n        console.log('SW registered: ', registration);\r\n      }).catch(registrationError => {\r\n        console.log('SW registration failed: ', registrationError);\r\n      });\r\n    });\r\n  }\r\n\r\nconst base = document.getElementById('base');\r\nconst game = new Game(base);\r\ngame.init();\r\n"],"sourceRoot":""}